@startuml

left to right direction
skin rose
skinparam packageStyle rectangle


actor "Player" as Player
actor "Game" as Game

rectangle "Monopoly Game" {

    usecase StartGame as "==Start Game
==
- Initialize Game Board
- Open Server to Players
- Initialize Players"

    usecase StartTurn as "==Start Turn
==
- Move Player based on Roll Dice result
- Send Possible Choices to Player
- End move"

    usecase PassStart as "==PassStart
==
- Player Collects $200"

    usecase GoToJail as "==Go To Jail
==
- Move Player to Jail Position
- Block Next Player Turn"

    usecase BuyProperty as "==Buy Property
==
- Check For Balance
- Widthraw Balance from Player if Check is True
- Inform Player has Low Balance if Check is False"

	usecase PayRent as "==Pay Rent
==
- Check for Balance
- Widthdraw Balance from Player if Check is True
- Inform Player he Lost if Check is False"

    usecase BuyHouse as "==Buy House
==
- Check for Balance
- Check if Player Has all Properties of One Color
- Widthraw Balance from Player if check is Frue
- Transfer Property Owner to Player
- Inform Player has Low Balance if check is False"

    usecase LoseGame as "==Lose Game
==
- Inform Player he Lost
- Update Player Status to Lost"

    usecase EndGame as "==End Game
==
- Check if Set Turns Have Passed
- Check if One Player Remaining
- If Check is True Game Ends
- Calculate"



    usecase EndTurn as "==End Turn
==
- Player Ends their turn
- Another Player Starts Their Turn"

    usecase SendGameUpdate as "==Send Game Update
==
- Collect Changes
- Send Changes"
    usecase ReceiveGameUpdate as "==Receive Game Update
==
- Receive Changes
- Update Game Status"

    usecase JoinGame as "==Join Game"

}


EndTurn <.. EndGame: <<extend>>

StartGame -- Player
Player -- StartTurn
Player -- BuyProperty
StartTurn <.. PassStart: <<extend>>
StartTurn <.. GoToJail: <<extend>>
Player -- BuyHouse
Player -- EndTurn
Player -- JoinGame
StartTurn <.. PayRent:<<extend>>

PayRent <.. LoseGame: <<extend>>
StartTurn --> SendGameUpdate: <<include>>

BuyProperty --> SendGameUpdate: <<include>>

BuyHouse --> SendGameUpdate: <<include>>

EndTurn --> SendGameUpdate: <<include>>
Game -- ReceiveGameUpdate


@enduml